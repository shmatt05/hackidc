@import "compass/css3";

/* VARIABLES */

  /* COLOURS */
  // Material Design recommends using a 500-hue color for the primary UI, and to highlight inline actions with non-500 accents
  $material-primary-500: #673AB7;
  $material-accent-300: #4FC3F7;
  $material-accent-400: #29B6F6;
  $material-mono-background: #EEE;
  $material-mono-selected: #DEDEDE;
  $contentDrawer-background: #FFF;

  /* PAGE DIMENSIONS */
  $coreHeader-height: 9em;
  $coreToolbar-collapsed-height: 4em;
  $coreToolbar-width: 19em;
  $full-page-gutter-width: 9em;

  /* OTHER DIMENSIONS */
  $action-button-size: 3em;
  
  // Because the selectedBar is nested inside the input-box, whose dimensions are also in em, this has gotta be rem to make them the same dimensions
  $inputBox-width: 20rem;

  /* EXTERNAL ASSETS */
  // Import the Android/Material fontset from Google to adhere to Typographic standards, add the flexibility to display bolded words for emphasis
  @import "//fonts.googleapis.com/css?family=Roboto:400,700";
  // Import FontAwesome assets so we can make "visual" action buttons
  @import "//netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.css";

  /* MIXINS */
  // Breakpoint Mixin - idea credited to http://responsivedesign.is/develop/getting-started-with-sass
  // The content drawer is fluid in width - when the expanded coreToolbar and page gutter make up more than 1/2 the screen, we will collapse the coreToolbar and gutter, moving the action button to the bottom of the contentDrawer, overlapping its contents
  $small-breakpoint: ($coreToolbar-width+$full-page-gutter-width)*2;

  @mixin breakpoint($point) {
    @if $point == small {
      @media (max-width: $small-breakpoint ) { @content ; }
    }
  }

  //Vendor-specific Calc mixin
  @mixin calc($property, $expression) { 
    #{$property}: -moz-calc(#{$expression}); 
  #{$property}: -o-calc(#{$expression}); 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression});
  }


/* CSS BEGINS */


body {
  font-family: Roboto, Helvetica Neue, Helvetica, Arial, sans-serif;
  font-size: 100%;
  height: 100vh;
  margin: 0;
  background-color: $material-mono-background;
  @include breakpoint(small) {
    background-color: $contentDrawer-background;
  }
}

// The purpose of this element is to provide our Javascript with information in pixels about what the calculated breakpoint was after SCSS compilation

.breakpointTarget {
  width: $small-breakpoint;
  visibility: hidden;
  position:absolute;
}

// Properties necessary to create a page structure similar to that used in Google's Polymer Project, as seen here - https://www.polymer-project.org/components/core-elements/demo.html#core-scroll-header-panel

.wrapper {
  height: 100%;
  margin-left: $coreToolbar-width;
  
  @include breakpoint(small) {
    margin: 0;
  }
}

.coreToolbar {
  z-index: 1;
  position: fixed;
  height: 100%;
  width: $coreToolbar-width;
  margin-left: -$coreToolbar-width;
  float:left;
  
  @include breakpoint(small) {
   height: $coreToolbar-collapsed-height;
   width: 100%;
   margin: 0;
   position: fixed;
  }
  //.coreToolbar.title
  .title {
    position: relative;
    height: $coreHeader-height;
    width: 100%;
    background-color: $material-primary-500;
    
    @include breakpoint(small) {
      height: $coreToolbar-collapsed-height;
      width: 100%;
    }
   //.coreToolbar.title.appTitle,.drawerTitle
   
    //Overlay the current card title and app title, and swap which one is displayed in full and collapsed view via media query
    
    .appTitle,
    .drawerTitle {
      position:absolute;
      bottom: 0;
      padding: 0 0 1em 3em;
      font-size: 1.2em;
      color: #EEEEEE;
      
      @include breakpoint(small) {
        position: relative;
        float: left;
      }
    }
    
    .drawerTitle {
      display: none;
    }
    
    @include breakpoint(small) {
      .drawerTitle {

        i {
          padding-right: 1em;
          cursor: pointer;
        }
        
        display: inline;
        padding: (($coreToolbar-collapsed-height/2) - 1em) 0 0 1.5em;
      }
      .appTitle {
        display: none;
        padding: (($coreToolbar-collapsed-height/2) - 1em) 0 0 3.5em;
      }
    }
  }
}

// Nav with links that will redirect the contents of the "contentDrawer" element

.nav {
  height: 100%;
  @include calc(height, 100% - #{$coreHeader-height});
  width: 100%;
  float:left;
  overflow: auto;
  overflow-y: auto;
  overflow-x: hidden;

  // Box shadow "inside" the navbar div, with a positive blur radius and a negative spread radius, keeping the shadow on one side of the box with a vertical offset. 
  @include box-shadow(inset 0em .8em .5em -.75em rgba(0,0,0,0.6));

  @include breakpoint(small) {
    @include transition(.5s, ease-in);
    transform: translate3d(-100%, 0, 0)
  }

  //.nav ul
  ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
    margin-top: 1em;
    padding-bottom: 1em;
  }
  
}

.navItems {
  li a {
    z-index: 2;
    width: 100%;
    cursor: pointer;
    display: inline-block;
    padding: 1em 0 1em 3em;
  }
  
  // .navItems li:first-child
  // Placeholder - ultimately you would want to assign this style based on the menu option currently selected
  li:first-child {
    background-color: $material-mono-selected;
  }
}

.expandNav {
  transform: translate3d(0, 0, 0);
  width: 20em;
  @include calc(height, 100vh - #{$coreToolbar-collapsed-height});
  background-color: $material-mono-background;
}

.inner {
  position: fixed;
  width: 100%;
  height: 1em;
  margin-top: $coreHeader-height;
  // Box shadow "inside" the inner page content box, mirroring the shadow in the navbar div.
  @include box-shadow(inset 0 .8em .5em -.75em rgba(0,0,0,0.6));
  
  @include breakpoint(small) {
    margin-top: $coreToolbar-collapsed-height;
    z-index: 1;
  }
}

.contentContainer {
  width: 100%;
  float: right;
  position: relative;
  margin-top: $coreHeader-height;
  
  @include breakpoint(small) {
    margin-top: 0;
    padding-top: $coreToolbar-collapsed-height;
  }
}

.overlay {
  background-color: rgba(0,0,0,0.5);
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.coreHeader {
  z-index: 0;
  position: fixed;
  left: $coreToolbar-width;
  top: 0;
  height: $coreHeader-height;
  @include calc(width, 100% - #{$coreToolbar-width});
  background-color: $material-primary-500;
  
  @include breakpoint(small) {
    display: none;
  }
}

.contentDrawer {
  z-index: 1; 
  margin: -($coreHeader-height/2) $full-page-gutter-width 3em .25em;
  padding: 1em 1.5em 2em 1.5em;
  background-color: $contentDrawer-background;
  @include border-radius(.1em);
  border: none;
  @include box-shadow(.2em .1em .2em .1em rgba(0,0,0,0.3));
  
  @include breakpoint(small) {
    margin: 0 0 0 .25em;
    box-shadow: none;
    border-radius: 0;
    height: 100%;
    padding-bottom: 0.25em;
  }
  //.contentDrawer.head
  .head {
    color: $material-primary-500;
    font-size: 1.25em;
    
    @include breakpoint(small) {
      display: none;
    }
  }
  
  //.contentDrawer.footer
  .footer {
    // Clear the parent div of floated children so it will expand
    overflow: hidden;
  }
  
  //.contentDrawer.footer > button
  .footer > button {
    float: right;
  }

}

// * Buttons *//

.btn {
  
  // The "default" button is a fixed-position action on the drawer, so they should be the same color, we can override this for a more specific type of button in another class
  
  z-index: 2;
  background-color: $contentDrawer-background;
  border: none;
  outline: none;
  text-align: center;
  text-transform: uppercase;
  text-decoration: none;
  cursor: pointer;
}

// Want a hover effect on the "default" buttons? Add the .hoverable class.

.hoverable {
  @include transition(.5s, ease-out);

  &:hover {
    background-color: $material-mono-selected;
  }
}

.btn-rect { 
    @include border-radius(.25em);
    padding: 1em 2em;
    margin: 0 .25em;
}

// Fix to remove inner-focus button text borders from Firefox, credit to http://www.karlrixon.co.uk/writing/remove-button-focus-outline-using-css/

button::-moz-focus-inner,
input[type="reset"]::-moz-focus-inner,
input[type="button"]::-moz-focus-inner,
input[type="submit"]::-moz-focus-inner,
input[type="file"] > input[type="button"]::-moz-focus-inner {
    border: none;
}

.btn-raised {
  color: #EEEEEE;
  background-color: $material-accent-400;
  @include transition(.5s, ease-out);
  @include box-shadow(0 .15em .4em 0 rgba(0, 0, 0, 0.3), 0 .15px .8em 0 rgba(0, 0, 0, 0.2));
  
  &:hover {
    background-color: $material-accent-300;
    @include box-shadow(0 .3em .4em 0 rgba(0,0,0,0.3), .08em 0 .3em 0 rgba(0,0,0,0.3));
	}
}

.btn-action {
  
  // Positioning Properties for an action button that flows with this particular layout template - position the particular button yourself with an ID if you want multiple/difference placement and remove positioning/sizing info from here
  
  position: fixed;
  right: 0;
  top: $coreHeader-height + ($action-button-size/2) + 1em;
  width: $action-button-size;
  height: $action-button-size;
  margin-right: ($full-page-gutter-width - $action-button-size)/2;
  
  @include border-radius(50%);
  @include box-shadow(0 .15em .4em 0 rgba(0, 0, 0, 0.3), 0 .1em .8em 0 rgba(0, 0, 0, 0.2));

  color: $material-primary-500;
  background-color: #EEEEEE;
  
  @include breakpoint(small) {
    top: auto;
    bottom: 0;
    margin: 0 2em 3em 0;
  }
}


// For some odd reason, Firefox has an additional 1em of top spacing, so I've targeted it specifically, and adjusted the action button's positioning to center it

body:not(:-moz-handler-blocked) .btn-action {
    top: $coreHeader-height - ($action-button-size/2) + 2em;
  
  @include breakpoint(small) {
    top: auto;
    bottom: 0;
    margin: 0 2em 3em 0;
  }
}

//* INPUTS *//
// Special credit to Scotch.io for their tutorial on Material Inputs

input[type='text'] {
  display: block;
  width: $inputBox-width;
  border: none;
  border-bottom: 1px solid;
  background-color: $contentDrawer-background;
  outline: none;
  
  &:focus ~ .selectedBar:before, 
  &:focus ~ .selectedBar:after {
    width: 50%;
  }
}

input[type='text'] ~ label {
  position: relative;
  top: -1.5em;
  
  color: $material-mono-selected; 
  pointer-events: none;
  transition: 0.2s ease all;
}

input[type='text'] ~ .selectedBar { 
  position: relative; 
  display: block;
  
  width: ($inputBox-width);
  
  &:before, &:after {
    position: absolute;
    bottom: 1px;
    content:'';

    height: .05em;
    width: 0;

    background-color: $material-primary-500; 
    @include transition (0.2s, ease all);
  }
  
  &:before{
    left: 50%;
  }

  &:after{
    right: 50%; 
  }
}

input[type='radio'] {

}

input[type='radio']:selected {
  height: 20px;
  width: 20px;
  background-color: red;
  
}

input[type='radio']:checked {
  
}

input[type='radio']:checked {

  &:after {
    content: '';
    height: 5em;
    width: 5em;
    background-color: yellow;
    position: relative;
    display: inline; 
  }
  
}

input[type='checkbox'] {
  
}

.credits {
  text-align: center;
  text-decoration: none;
}

.credits a{
  color: $material-primary-500;
  text-decoration: none;
}